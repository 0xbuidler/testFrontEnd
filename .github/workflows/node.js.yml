name: Node.js CI

on:
  push:
    branches: [ main ]
#   pull_request:
#     branches: [ main ]

env:
  PER_IMAGE_TAG: testFrontEnd-v1-dev

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    # - name: Use Node.js ${{ matrix.node-version }}
    #   uses: actions/setup-node@v1
    #   with:
    #     node-version: ${{ matrix.node-version }}
    # - run: npm ci
    # - run: npm build 

    - name: get shortsha
      id: vars
      run: |
        echo ::set-output name=sha_short::$(git rev-parse --short=4 ${{ github.sha }})

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-east-1
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dev-cbdc
#        IMAGE_TAG: ${{ github.ref }}
        IMAGE_TAG: ${{ steps.vars.outputs.sha_short }}
#        PER_IMAGE_TAG: testSpringBoot-v1
      run: |
        echo "ready to build docker images"
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$PER_IMAGE_TAG-$IMAGE_TAG -f ./docker/Dockerfile .
        echo "finished build "
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$PER_IMAGE_TAG-$IMAGE_TAG